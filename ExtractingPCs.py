#ExtractingPCs.py


#General packages
import GeneralFunctions as GF
from GeneralFunctions import st
from Parameters import P

import numpy as np
from numpy import log as ln
import os
import pandas as pd
import math as mt
import statistics
from itertools import islice #for selecting dictionary items
import matplotlib
from matplotlib import pyplot as plt
from collections import OrderedDict
#import sys


#class 

#Setting global vriables
help_name = ""
df_subjects = pd.DataFrame([])
df_RNA_seq = pd.DataFrame([])
############################ FUNCTIONS #########################################
def set_vars():
	global help_name
	global df_subjects
	global df_RNA_seq
	global help_name = ""
	if P.select_on_genes: help_name = P.GENE_SELECTION #variable for nameing files and folders
	else: help_name = "NoGeneSelection"
	if P.use_middle_age:	help_name += "_With-MiddleAge"
	else: 								help_name += "_No-MiddleAge"
	
	df_subjects = pd.DataFrame([])
	df_RNA_seq = pd.DataFrame([])
#*******************************************************************************
#function that decides if this column contains a sample of interest and thus must be read
def read_this_sample(index):
	if index in dict_samples or index == "Name" or index == "Description":
		return True
	return False
#*******************************************************************************
#function that only reads and stores the columns of interest in a pandas dataframe
def strip_data_file(filename, lambda_function, header, separator):
	print("\nReading", filename ,"...")
	if (lambda_function == 0):
		data = pd.read_csv(filename, header=header, usecols=["SAMPID","SMTSD"], sep=separator).query('SMTSD == "{}"'.format(P.tissue)) #Change the sample type here
	else:
		data = pd.read_csv(filename, header=header, usecols=(lambda x: lambda_function(x)), sep=separator) #'\t'
	print('Reading complete')
	return data
#*******************************************************************************
#*******************************************************************************


#*******************************************************************************


################################################################################
############################# THE MAIN CODE ####################################
################################################################################

def extractingpcs():
	#________________________Setting variables____________________________________
	set_vars()
	global df_subjects
	global df_RNA_seq
	
	#_______________________Checking diractory____________________________________
	if "Files_from_R" not in os.listdir('./'+P.experiment_name):
		exit("No PCfiles generated by R")
	
	print("help_name: ", help_name)
	#__________________Reading and converting the datafiles_______________________
	#Reading PCs dataframe
	df = pd.read_csv(P.experiment_name+"/Files_from_R/"+help_name+"_PCs.txt", delimiter="\t")
	df.rename({'Unnamed: 0': 'SubjectID'}, axis=1, inplace=True) #giving the first column the name "Name"
	df.set_index('SubjectID', inplace=True)
	#Reading a metafile to dictionary so that we have info[age, sex, DTHHRDY] about the subjects
	subjectinfo = {}
	with open(P.experiment_name+"/Files_for_R/"+help_name+"_METADATA.txt") as f:
		for line in f:
			(k, v) = line.split("\t")
			if k != "": subjectinfo[k] = v[:-1]

	df.insert(0, 'Agegroup', [subjectinfo[x] for x in subjectinfo.keys()]) #Adding the agegroup to the dataframe
	df.sort_values('Agegroup', axis='rows', inplace=True, ascending=False)
	df = df.iloc[:, 0:2] #only keeping PC1 to work with
	print(df)
	
	AgeRightWrong = {}
	young_correct = {}
	young_wrong = {}
	old_correct = {}
	old_wrong = {}
	for subject, row in df.iterrows():
		#print(subject)

		if df["Agegroup"][subject] == "Young (20-49)": 
			if df["PC1"][subject] < 0: young_correct[subject] = None#correctgroup = "right"
			else: #correctgroup = "wrong"
		if df["Agegroup"][subject] == "Old (60-79)":
			if df["PC1"][subject] > 0: #correctgroup = "right"
			else: #correctgroup = "wrong"
		#AgeRightWrong[subject] = correctgroup


	for i in AgeRightWrong:
		print(i, AgeRightWrong[i])
		input()





	exit()
	for index, row in df.iterrows():
		input(row)
	print(df)
	#for i in df["Name"]:
	#	input(i)
	exit()
	f = open(P.experiment_name+"/Files_from_R/"+help_name+"_PCs.txt", "r")
	
	
	
	for i in f: #looping over rows in PCas file
		print(i)
		input()
		pass
		#print()
		#f.write(i[0]+" "+str(i[1])+"\n")
	f.close
	
	
	
	
	
	
	
	
	
	
	
	
	
	

